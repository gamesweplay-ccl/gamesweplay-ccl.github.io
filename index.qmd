---
title: "Home"
format:
  html:
    css: styles.css
---

# **Welcome!**

## What game should you play?

```{=html}
<style>
  #game-filter {
    background: #ffffff;
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
    width: 100%;
    max-width: 900px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-row {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .form-row label {
    flex: 1 1 200px;
    font-weight: 600;
    color: #333;
  }

  .form-row select {
    flex: 2 1 300px;
    padding: 0.6rem;
    border-radius: 10px;
    border: 1px solid #ddd;
    font-size: 1rem;
    background-color: #f2faff;
    transition: border-color 0.2s ease;
  }

  .form-row select:focus {
    outline: none;
    border-color: #7ec4cf;
  }

  #results {
    margin-top: 2rem;
    background-color: #fff7f0;
    border: 1px solid #ffe0c2;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    max-width: 900px;
    margin-left: auto;
    margin-right: auto;
  }

  #results h3 {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    align-items: center;
  }

  #find-button {
    padding: 0.6rem 1.2rem;
    background-color: #7ec4cf;
    color: white;
    font-weight: bold;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1rem;
  }

  #find-button:hover {
    background-color: #5bb2bd;
  }

  #lucky-button {
    padding: 0.6rem 1.4rem;
    background-color: #fcbf49;
    color: #000;
    font-weight: bold;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    font-size: 1.1rem;
  }

  #lucky-button:hover {
    background-color: #fca311;
  }
</style>

<form id="game-filter">
  <div class="form-row">
  <label for="time">How much time do you have?</label>
  <select name="time" id="time">
    <option value="">Select time</option>
    <option value="10">10 mins</option>
    <option value="20">20 mins</option>
    <option value="30">30 mins</option>
    <option value="40">40 mins</option>
  </select>
  </div>
  <div class="form-row">
  <label for="players">How many players?</label>
  <select name="players" id="players">
    <option value="">Select players</option>
    <option value="1">Solo</option>
    <option value="2">Duet</option>
    <option value="4">Group</option>
    <option value="10">Class</option>
  </select>
  </div>
  <!-- <div class="form-row">
  <label for="material">What material do you have?</label>
  <select name="material" id="material">
    <option value="">Select material</option>
    <option value="cards">Cards</option>
    <option value="dice">Dice</option>
    <option value="board">Board</option>
    <option value="none">None</option>
  </select>
  </div> -->
  <div class="form-row">
  <label for="difficulty">What difficulty?</label>
  <select name="difficulty" id="difficulty">
    <option value="">Select difficulty</option>
    <option value="easy">Easy</option>
    <option value="medium">Medium</option>
    <option value="hard">Hard</option>
  </select>
  </div>
  <div class="form-actions">
      <button type="button" id="lucky-button" class="lucky-btn">Pick one for me!</button>
      <button type="submit" id="find-button">Find Games</button>
  </div>
</form>
  <div id="results" style="display: none;">
    <h3><em>Suggestions</em></h3>
    <p id="results-content"></p>
  </div>
```

<script>
  const difficultyMap = {
    easy: "★",
    medium: "★★",
    hard: "★★★"
  };

  // Load JSON once and reuse
  let gameData = [];

  async function loadGames() {
    if (gameData.length === 0) {
      const res = await fetch('/static/all_metadata.json');  // adjust path as needed
      gameData = await res.json();
    }
    return gameData;
  }

  function getFilters() {
    return {
      difficulty: document.getElementById("difficulty").value,
      maxTime: document.getElementById("time").value,
      players: document.getElementById("players").value
    };
  }

  function isPlayerCountInRange(selected, rangeStr) {
    const selectedNum = parseInt(selected);
    if (!rangeStr) return false;

    if (rangeStr.includes('-')) {
      const [min, max] = rangeStr.split('-').map(s => parseInt(s.trim()));
      return selectedNum >= min && selectedNum <= max;
    }

    // Single number match
    return parseInt(rangeStr) === selectedNum;
}

  function filterGames(games, { difficulty, maxTime, players }) {
    return games.filter(game => {
      const matchesDifficulty = !difficulty || game.complexity === difficultyMap[difficulty];
      const matchesTime = !maxTime || parseInt(game.time) <= parseInt(maxTime);
      const matchesPlayers = !players || isPlayerCountInRange(players, game.players);
      return matchesDifficulty && matchesTime && matchesPlayers;
    });
  }

  // "Find Games" Button
  document.getElementById("game-filter").addEventListener("submit", async function (e) {
  e.preventDefault();

  const filters = getFilters();
  const games = await loadGames();
  const matchingGames = filterGames(games, filters);

  const resultsEl = document.getElementById("results-content");

  if (matchingGames.length > 0) {
    resultsEl.innerHTML = `<ul>${matchingGames.map(g => `
      <li style="margin-bottom: 1rem;">
        <a href="/games/${g.filename}.html"><strong>${g.title}</strong></a><br>
        <small>${g.summary || 'No description available.'}</small>
      </li>`).join('')}
    </ul>`;
  } else {
    resultsEl.innerHTML = "<p>No games found matching your filters.</p>";
  }

  document.getElementById("results").style.display = "block";
});

  // "I'm Feeling Lucky" Button
  document.getElementById("lucky-button").addEventListener("click", async function () {
    const filters = getFilters();
    const games = await loadGames();
    const matchingGames = filterGames(games, filters);

    if (matchingGames.length > 0) {
      const randomGame = matchingGames[Math.floor(Math.random() * matchingGames.length)];
      window.location.href = `/games/${randomGame.filename}.html`;
    } else {
      alert("No matching games to choose from!");
    }
  });
</script>