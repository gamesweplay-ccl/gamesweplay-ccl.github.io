---
airtable_id: recH5oRhQingC8rMj
board_links: https://drive.google.com/file/d/1gBDC1YQlyKHL7ZnP1fJi-dmXpyhHNsD-/view?usp=sharing
complexity: ★★
external_links: https://kangankhanke.github.io/13-sheep/
filename: 13-sheep
format:
  html:
    css: ../styles.css
    page-layout: full
game_format: Dice
manual_links: https://drive.google.com/file/d/1OLKO3YJje3GuRKbVV1biM4unttrVr1Fq/view?usp=sharing
players: 1-100
rules_video: https://youtu.be/EZhWe0pcOKE
summary: A dice is rolled each round. Players draw the fence corresponding to the
  outcome somewhere on their individual boards. Fences may not overlap, intersect
  or pass through bushes. The player who protects the most sheep at the end of the
  game wins.
time: '30'
title: 13 Sheep
type: Mathematics/Probability
walkthrough_video: ''
---

# 13 Sheep

:::{.game-info-box}
:::{.game-stats}
```{=html}
<span class="tooltip-gamestats" data-tooltip="30 minutes"><i class="fas fa-clock"></i></span>
<span class="tooltip-gamestats" data-tooltip="1-100 players"><i class="fas fa-users"></i></span>
<span class="tooltip-gamestats" data-tooltip="Dice required"><i class="fas fa-clone"></i></span>
<span class="tooltip-gamestats" data-tooltip="★★"><i class="fas fa-star"></i></span>
```
:::
:::

:::{.game-summary}
A dice is rolled each round. Players draw the fence corresponding to the outcome somewhere on their individual boards. Fences may not overlap, intersect or pass through bushes. The player who protects the most sheep at the end of the game wins.
:::

:::{.game-actions}
```{=html}
<a href="https://kangankhanke.github.io/13-sheep/" target="_blank" class="btn coloured-button"><i class="fa fa-gamepad"></i> Play the game</a>
<a href="https://youtu.be/EZhWe0pcOKE" target="_blank" class="btn coloured-button"><i class="fa fa-video"></i> Rules video</a>
<a href="#" target="_blank" class="btn disabled-button"><i class="fa fa-video"></i> Watch us play</a>
<a href="https://drive.google.com/file/d/1OLKO3YJje3GuRKbVV1biM4unttrVr1Fq/view?usp=sharing" target="_blank" class="btn coloured-button"><i class="fa fa-book"></i> Read the manual</a>
<a href="https://drive.google.com/file/d/1gBDC1YQlyKHL7ZnP1fJi-dmXpyhHNsD-/view?usp=sharing" target="_blank" class="btn coloured-button"><i class="fa fa-file-pdf"></i> Printable PDF</a>
```
:::

```{=html}
<div class="reaction-container">
	<div class="emoji" data-reaction="emoji-happy" data-tooltip="Loved it!">
		<img data-icon="happy" alt="Loved it" />
	</div>
	<div class="emoji" data-reaction="emoji-smile" data-tooltip="Enjoyed it">
		<img data-icon="smile" alt="Enjoyed it" />
	</div>
	<div class="emoji" data-reaction="emoji-meh" data-tooltip="Meh">
		<img data-icon="meh" alt="Meh" />
	</div>
	<div class="emoji" data-reaction="emoji-yucks" data-tooltip="Did not enjoy">
		<img data-icon="yucks" alt="Did not enjoy" />
	</div>
</div>

<style>
	p {
		margin: 2rem 0;
		font-size: 1.1rem;
		line-height: 1.6;
		color: #666;
		font-family: "Omnes", sans-serif;
	}

	body {
		max-width: 100%;
	}

	@media (max-width: 600px) {
		body {
			background-image: none !important;
		}
	}

	.reaction-container {
		display: flex;
		justify-content: center;
		gap: 6px;
		padding: 16px;
		margin-top: 60px;
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.emoji {
		position: relative;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
		width: 5rem;
		height: 5rem;
	}

	.emoji img {
		width: 80%;
		height: 80%;
		pointer-events: none;
	}

	/* Tooltip */
	.emoji::after {
		content: attr(data-tooltip);
		position: absolute;
		bottom: 110%;
		left: 50%;
		transform: translateX(-50%);
		background: #333;
		color: #fff;
		padding: 4px 8px;
		border-radius: 4px;
		font-size: 0.75rem;
		white-space: nowrap;
		opacity: 0;
		pointer-events: none;
		transition: opacity 0.2s ease;
		z-index: 10;
	}

	.emoji:hover::after {
		opacity: 1;
	}

	.emoji:hover {
		transform: scale(1.1);
	}
	/* Clicked animation */
	.clicked {
		animation: pop 0.3s ease;
	}

	/* Active reaction = blue glow */
	.active-reaction {
		filter: drop-shadow(0 0 4px #00aaff);
	}
	@keyframes pop {
		0% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.3);
		}
		100% {
			transform: scale(1);
		}
	}

	/* Action buttons */
	.game-actions {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		margin: 2.5rem 0;
		gap: 1.5rem;
		align-items: center;
		width: 100%;
	}

	.btn {
		position: relative;
		border: none;
		padding: 1rem 1.2rem;
		border-radius: 999px;
		text-decoration: none;
		font-weight: 200;
		transition: all 0.3s ease;
		display: inline-block;
		text-align: center;
		min-width: 200px;
		font-family: "Omnes", sans-serif;
		font-size: 1.1rem;
		cursor: pointer;
		color: #333;
	}

	.btn:after {
		content: "";
		position: absolute;
		top: 4px;
		bottom: 4px;
		left: 4px;
		right: 4px;
		border-radius: 999px;
		border: 1px solid #5f4c3f;
		pointer-events: none;
	}

	/* Hide empty buttons */
	.game-actions:empty {
		display: none;
	}

	.disabled-button {
		pointer-events: none; /* Prevent clicks */
		opacity: 0.5; /* Make it look disabled */
		background-color: #ccc; /* Grey background */
		color: #666; /* Darker text */
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		// === 1. Background and emoji image path setup ===
		const emojiFolderMap = {
			"Strategy": "strategy-emojis",
			"Mathematics/Probability": "math-emojis",
			"SEL": "sel-emojis",
			"Science/Deduction": "science-emojis",
		};

		const type = "{{< meta type >}}";
		const emojiFolder = emojiFolderMap[type];

		// Set background image
		const bgMap = {
			"Strategy": "/static/backgrounds/strategy_home_bg.svg",
			"Mathematics/Probability": "/static/backgrounds/math_home_bg.svg",
			"SEL": "/static/backgrounds/sel_home_bg.svg",
			"Science/Deduction": "/static/backgrounds/science_home_bg.svg",
		};

		const bg = bgMap[type];
		if (bg) {
			document.body.style.background = `
				linear-gradient(rgb(255, 251, 227, 0.3), rgb(255, 251, 227, 0.3)),
				url(${bg})
			`;
			document.body.style.backgroundRepeat = "no-repeat";
			document.body.style.backgroundSize = "cover";
			document.body.style.backgroundAttachment = "scroll";
			document.body.style.backgroundPosition = "center top";
		}

		// Set emoji image sources dynamically
		if (emojiFolder) {
			const emojiImages = document.querySelectorAll("[data-icon]");
			emojiImages.forEach((img) => {
				const icon = img.dataset.icon;
				img.src = `/static/images/${emojiFolder}/${emojiFolder.replace(
					"-emojis",
					""
				)}-${icon}.svg`;
			});
		}

		// === 2. Reaction click logic with cookies ===
		const emojis = document.querySelectorAll("[data-reaction]");
		const gameId = window.location.pathname;
		const cookieKey = `reaction-${gameId}`;

		function setCookie(name, value, days) {
			const d = new Date();
			d.setTime(d.getTime() + days * 24 * 60 * 60 * 1000);
			document.cookie = `${name}=${value};expires=${d.toUTCString()};path=/`;
		}

		function getCookie(name) {
			const cookies = document.cookie.split("; ");
			for (const cookie of cookies) {
				const [key, value] = cookie.split("=");
				if (key === name) return value;
			}
			return null;
		}

		function deleteCookie(name) {
			document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
		}

		function getReactions() {
			const cookieValue = getCookie(cookieKey);
			if (!cookieValue) return [];
			return cookieValue.split(",");
		}

		function saveReactions(reactions) {
			if (reactions.length === 0) {
				deleteCookie(cookieKey);
			} else {
				setCookie(cookieKey, reactions.join(","), 365);
			}
		}

		let selectedReactions = getReactions();
		selectedReactions.forEach((reaction) => {
			const emoji = document.querySelector(
				`[data-reaction="${reaction}"]`
			);
			if (emoji) {
				emoji.classList.add("active-reaction");
			}
		});

		emojis.forEach((emoji) => {
			emoji.addEventListener("click", () => {
				const clickedReaction = emoji.dataset.reaction;
				const index = selectedReactions.indexOf(clickedReaction);

				if (index > -1) {
					// Deselect
					selectedReactions.splice(index, 1);
					emoji.classList.remove("active-reaction");
				} else {
					// Select
					selectedReactions.push(clickedReaction);
					emoji.classList.add("active-reaction");
				}

				saveReactions(selectedReactions);

				// Animate
				emoji.classList.add("clicked");
				setTimeout(() => emoji.classList.remove("clicked"), 400);

				// TODO: Send to backend if needed
			});
		});
	});
</script>

<script>
	// This script changes the button colors based on the game type
	document.addEventListener("DOMContentLoaded", function () {
		// Define base and hover colors for each game type
		const typeStyles = {
			"Mathematics/Probability": { base: "#ffecdb", hover: "#d97436" },
			"SEL": { base: "#dcf3fa", hover: "#6cc9e1" },
			"Strategy": { base: "#fffcd4", hover: "#e6dc33" },
			"Science/Deduction": { base: "#e4f6dd", hover: "#9ec03c" },
		};

		const gameType = "{{< meta type >}}";
		const styles = typeStyles[gameType];

		if (styles) {
			const buttons = document.querySelectorAll(".coloured-button");
			buttons.forEach((button) => {
				button.style.backgroundColor = styles.base;
				button.style.border = "none";
				button.style.color = "black";
				button.style.transition = "background-color 0.3s ease";

				// Add hover effect using JavaScript event listeners
				button.addEventListener("mouseenter", () => {
					button.style.backgroundColor = styles.hover;
				});
				button.addEventListener("mouseleave", () => {
					button.style.backgroundColor = styles.base;
				});
			});
		}
	});
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		const emojiFolderMap = {
			"Strategy": "strategy-emojis",
			"Mathematics/Probability": "math-emojis",
			"SEL": "sel-emojis",
			"Science/Deduction": "science-emojis",
		};

		const type = "{{< meta type >}}";
		const emojiFolder = emojiFolderMap[type];

		if (emojiFolder) {
			const emojiImages = document.querySelectorAll(".emoji img");
			emojiImages.forEach((img) => {
				const icon = img.dataset.icon;
				img.src = `../static/images/${emojiFolder}/${emojiFolder.replace(
					"-emojis",
					""
				)}-${icon}.svg`;
			});
		}
	});
</script>
```

