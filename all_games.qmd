---
title: "All Games"
format:
  html:
    css: styles.css
listing:
  contents: games
  page-size: 51
  type: table
  fields: [title, type, game_format, players, time, complexity]
  field-display-names:
    title: "Title"
    type: "Type"
    game_format: "Material"
    complexity: "Complexity"
    players: "Players"
    time: "Duration"
  # sort: type
  sort-ui: [complexity, players, title, time, type, game_format]
  filter-ui: [title, type, game_format, complexity]
  table-hover: true
  table-striped: false
page-layout: full
---

Welcome to our collection of games! Browse through our catalog below to find games suitable for different age groups and player counts, by clicking on its name.

```{=html}
<!-- Page and table background styling -->
<style>
  body,
  table,
  thead,
  tbody,
  tr,
  td,
  th {
    background-color: #fffdf0 !important;
  }

  /* Filter and sort containers */
  .listing-filters,
  .listing-filter-container,
  .quarto-listing-table-tools {
    background-color: #fffdf0 !important;
    border: none !important;
    box-shadow: none !important;
  }

  /* Filter inputs (text + dropdowns) */
  .listing-filters input[type="text"],
  .listing-filters select,
  .listing-filter-container input,
  .listing-filter-container select,
  .form-select,
  .form-control {
    background-color: #fffdf0 !important;
    color: #333 !important;
    border: 1px solid #ccc !important;
    border-radius: 5px;
    box-shadow: none !important;
  }

  /* Title column link styles
  td:first-child a {
    color: #666 !important;
    text-decoration: none;
    font-weight: 600;
  }

  td:first-child a:hover {
    color: blue !important;
    text-decoration: underline;
  } */
</style>

<!-- Color coding by Type column -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const colorMap = {
      "Mathematics/Probability": "#ff9658",
      "SEL": "#70cdff",
      "Strategy": "#fdd559",
      "Science/Deduction": "#bdd866"
    };

    document.querySelectorAll("table tbody tr").forEach((row) => {
      const typeCell = row.cells[1]; // 2nd column = 'Type'
      const titleCell = row.cells[0]; // 1st column = Title

      if (typeCell && titleCell) {
        const type = typeCell.textContent.trim();
        const color = colorMap[type];
        if (color) {
          // Color all cells
          Array.from(row.cells).forEach((cell) => {
            cell.style.color = color;
          });

          // Style the <a> link in the title column
          const link = titleCell.querySelector("a");
          if (link) {
            link.style.color = color;
            link.style.fontWeight = "600";
            link.style.textDecoration = "none";

            // On hover: blue + underline
            link.addEventListener("mouseenter", () => {
              link.style.color = "#af4478";
              link.style.textDecoration = "underline";
            });

            // On mouse leave: revert to original color and no underline
            link.addEventListener("mouseleave", () => {
              link.style.color = color;
              link.style.textDecoration = "none";
            });
          } else {
            titleCell.style.fontWeight = "600";
          }
        }
      }
    });
  });
</script>
```
```{=html}
<script>
document.addEventListener("DOMContentLoaded", () => {
  const table = document.querySelector("table");
  if (!table) return;

  const rows = Array.from(table.querySelectorAll("tbody tr"));

  const getCellText = (row, index) => row.cells[index]?.textContent?.trim().toLowerCase() || "";

  const typeIndex = 1;        // 'Type'
  const complexityIndex = 5;  // 'Complexity'

  rows.sort((a, b) => {
    const typeA = getCellText(a, typeIndex);
    const typeB = getCellText(b, typeIndex);
    if (typeA !== typeB) return typeA.localeCompare(typeB);

    const compA = getCellText(a, complexityIndex);
    const compB = getCellText(b, complexityIndex);
    return compA.localeCompare(compB);
  });

  const tbody = table.querySelector("tbody");
  rows.forEach(row => tbody.appendChild(row));
});
</script>
```

